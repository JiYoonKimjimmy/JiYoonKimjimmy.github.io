I"<h2 id="iocinversion-of-control">IoC(Inversion of Control)</h2>
<ul>
  <li><strong>제어권 역전</strong>? 의존성을 직접 선언하는 것이 아닌, 어떤 방법을 통해 선언된 객체를 주입받아 사용하는 것</li>
</ul>

<h3 id="ioc-container">IoC Container</h3>
<h4 id="applicationcontext-beanfactory">ApplicationContext (BeanFactory)</h4>
<ul>
  <li>Container 내부에서 생성한 Bean 들만 관리</li>
  <li>Bean 을 생성하고 엮어주며 제공</li>
</ul>

<hr />

<h2 id="bean">Bean</h2>
<ul>
  <li>Spring IoC Container 가 관리하는 객체</li>
</ul>

<h3 id="bean-등록하는-방법">Bean 등록하는 방법</h3>
<h4 id="1-componentscan">1. @ComponentScan</h4>
<ul>
  <li><strong>@Component</strong> 이 있는 Class 를 모두 찾아서 등록하는 방식</li>
</ul>

<h4 id="2-bean">2. @Bean</h4>
<ul>
  <li><strong>@Configuration</strong> 이 있는 Class 안에 <strong>@Bean</strong> 을 사용하여 등록하는 방식</li>
</ul>

<hr />

<h2 id="didependency-injection">DI(Dependency Injection)</h2>
<ul>
  <li><strong>의존성 주입</strong>? 등록된 Bean 들을 사용할 수 있게 주입받는 것</li>
</ul>

<h3 id="의존성-주입받는-방법">의존성 주입받는 방법</h3>
<h4 id="1-autowired-or-inject">1. @Autowired or @Inject</h4>
<ul>
  <li>생성자 &amp; 필드 &amp; Setter 에 <strong>@Autowired</strong> 를 추가하면 Bean 의존성 주입 가능
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
<span class="nd">@Autowired</span>
<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ApiService</span> <span class="n">apiService</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="2-생성자의-인자값으로-bean-등록된-class-일-경우-의존성-주입-가능">2. 생성자의 인자값으로 Bean 등록된 Class 일 경우 의존성 주입 가능</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ApiService</span> <span class="n">apiService</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">ApiController</span><span class="o">(</span><span class="nc">ApiService</span> <span class="n">apiService</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">apiService</span> <span class="o">=</span> <span class="n">apiService</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="aopaspect-oriented-programming">AOP(Aspect-Oriented Programming)</h2>
<ul>
  <li><strong>관점 지향 프로그래밍</strong>? 어플리케이션 전체에서 사용되는 기능을 재사용하는 것</li>
  <li>핵심적인 기능에서 <strong>부가적인 기능(Aspect)</strong> 을 분리</li>
</ul>

<h3 id="aspect">Aspect</h3>
<ul>
  <li>부가적인 기능을 정의한 <strong>Advice</strong> 와 Advice를 어디에 적용할지 결정하는 <strong>PointCut</strong> 을 합친 개념</li>
</ul>

<h4 id="예제">예제</h4>
<ul>
  <li>LogExecutionTime : Annotation 역할
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">LogExecutionTime</span> <span class="o">{</span>
<span class="c1">// Annotation 역할</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>LogAspect : 실제 Annotation 구현체
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Aspect</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogAspect</span> <span class="o">{</span>

  <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">LogAspect</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

  <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(LogExecutionTime)"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">LogExecutionTime</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
      <span class="nc">StopWatch</span> <span class="n">stopWatch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StopWatch</span><span class="o">();</span>

      <span class="n">stopWatch</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

      <span class="nc">Object</span> <span class="n">proceed</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>

      <span class="n">stopWatch</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>

      <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">stopWatch</span><span class="o">.</span><span class="na">prettyPrint</span><span class="o">());</span>

      <span class="k">return</span> <span class="n">proceed</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong><em>! 필요한 Method 위에 @LogExecutionTime 추가하면 Log 확인 가능 !</em></strong></p>

<hr />

<h2 id="psaportable-service-abstraction">PSA(Portable Service Abstraction)</h2>
<ul>
  <li><strong>휴대성이 있는(잘 갖춰진) 서비스 추상화</strong>? 인터페이스를 이용해서 개발한 서비스. 잘 갖춰진 인터페이스를 이용해 개발하는 것이 서비스의 확장성을 높일 수 있는 방법.</li>
</ul>

<h3 id="psa-예시">PSA 예시</h3>
<ul>
  <li>Spring Transaction : <strong>@Transactional</strong></li>
  <li>Cache : <strong>@Cacheable\, @CacheEvict</strong></li>
  <li>Spring MVC : <strong>@Controller\, @RequestMapping</strong></li>
</ul>
:ET