I"<h2 id="redis-와-cache">Redis 와 Cache</h2>
<p>Redis (<strong>Remote Dictionary Server</strong>)는 메모리 기반의 다양한 구조 데이터를 메모리에 저장이 가능하여 높은, Read, Write 성능을 보장하는 비 관계형 데이터베이스이다. 그리하여 <strong>Caching Solution</strong> 으로 많이 사용중인데,
그렇다면 <strong>Caching Solution</strong> 는 왜 필요할까?</p>

<hr />

<h3 id="cache">Cache</h3>
<p><strong>Cache</strong> 는 여러가지의 의미와 정의가 있지만, 요청에 대한 응답을 빠르게 서비스하기 위해 미리 저장해두는 저장소라고 정리하고 싶다. 같은 요청과 응답에 대해 DB 접근 없이 메모리 접근만으로도 빠르게 응답 처리할 수 있을 것이다.
이러한 <em>Caching</em> 을 다양한 자료 구조 형태로 관리를 해주는 것이 <strong>Redis</strong> 이다.</p>

<hr />

<h3 id="redis-의-특징">Redis 의 특징</h3>
<ul>
  <li>영속성을 지원하는 <strong>In-Memory</strong> 데이터 저장소이다.</li>
  <li>메모리에 데이터를 저장하기 때문에 처리 속도가 빠르다.</li>
  <li>디스크에도 저장되기 때문에 데이터 복구가 가능하다.<strong>(<code class="language-plaintext highlighter-rouge">Memcached</code> 와 차이점)</strong></li>
  <li>만료일을 지정하는 방식으로 데이터 삭제가 가능하다.</li>
  <li>저장소의 메모리 재사용하지 않는다.</li>
  <li>다양한 데이터 타입을 지원한다.
    <ul>
      <li><strong>Redis 가 지원하는 데이터 타입</strong>
        <ol>
          <li>Strings : 단순한 key - value 구조</li>
          <li>Sets : 중복이 없는 순서가 없는 Strings 데이터 구조</li>
          <li>Sorted Sets : Sets 구조의 순서를 보장하는 구조</li>
          <li>Hashs : key - value 의 다중 구조 Object 를 저장할 수 있는 데이터 구조</li>
          <li>Lists : Array 형태의 데이터 구조</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>Master - Slave 구조의 Server 복제를 지원한다.</li>
  <li>Write 성능을 위해 Client 에 <strong>Sharding</strong> 을 지원한다.
    <ul>
      <li><strong>Sharding</strong> ? 같은 테이블 스키마를 가진 데이터를 다수의 데이터베이스에 분산하여 저장하는 방법</li>
    </ul>
  </li>
</ul>

<h4 id="redis-의-장점">Redis 의 장점</h4>
<ul>
  <li>다양한 구조의 데이터 처리 가능</li>
  <li>List 형 데이터의 입력과 삭제의 성능은 MySQL에 비해 10배 정도 빠른 성능 차이를 발휘</li>
  <li>메모리를 활용하면서 영속적인 데이터 보존 가능
    <ul>
      <li><em>삭제, expries</em> 설정이 아니라면 데이터가 삭제되지 않음</li>
      <li><em>스냅샷</em> 기능을 제공하여 메모리의 내용을 별도 파일로 저장가능하여 복구 기능 제공</li>
    </ul>
  </li>
  <li><strong>1개의 Single Thread 로 수행</strong>되기 때문에, 서버 하나에 여러개의 서버 운용이 가능하다.</li>
</ul>

<hr />

<h3 id="redis-유의사항">Redis 유의사항</h3>
<h4 id="redis-key">Redis Key</h4>
<ul>
  <li>Redis 의 <code class="language-plaintext highlighter-rouge">Key</code> 는 문자열이기 때문에 모든 이진 시퀀스를 키로 사용 가능하고, 빈 문자열까지도 <code class="language-plaintext highlighter-rouge">Key</code> 가 될 수 있다. 최대 <code class="language-plaintext highlighter-rouge">Key</code> 크기는 512MB 이다.</li>
  <li>Redis 의 <code class="language-plaintext highlighter-rouge">Key</code> 설계는 매우 중요하며, 설계에 따라 Redis 의 성능 차이가 발생할 수 있다.</li>
</ul>

<h4 id="exprie-기능">Exprie 기능</h4>
<ul>
  <li>적절한 만료일을 지정해야 메모리 부하 조절이 가능하다.</li>
</ul>

<hr />

<h3 id="redis-caching-전략">Redis Caching 전략</h3>

<hr />

<h3 id="redis-메모리-관리">Redis 메모리 관리</h3>
<h4 id="ziplist-구조-활용">ziplist 구조 활용</h4>

<hr />

<p><strong>Redis 관련 다른 Post</strong></p>
<ul>
  <li><a href="/2021/02/21/AWS_ElastiCache/">AWS ElastiCache For Redis + Spring Boot 연동</a></li>
</ul>

<p><strong>Reference</strong></p>
<ul>
  <li><a href="https://daddyprogrammer.org/post/3870/spring-rest-api-redis-caching/">daddyprogrammer 블로그 [Redis로 api 결과 캐싱(Caching) 처리]</a></li>
  <li><a href="https://medium.com/@jyejye9201/%EB%A0%88%EB%94%94%EC%8A%A4-redis-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-2b7af75fa818">Alic Medium [레디스(Redis)란 무엇인가?]</a></li>
  <li><a href="https://medium.com/garimoo/%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%A0%88%EB%94%94%EC%8A%A4-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC-01-92aaa24ca8cc">garimoo Medium [Redis 튜토리얼]</a></li>
</ul>
:ET