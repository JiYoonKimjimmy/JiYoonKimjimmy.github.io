I"]A<h2 id="spring-boot--aws-elasticache-for-redis">Spring Boot + AWS ElastiCache for Redis</h2>

<h3 id="aws-elasticache-for-redis-cluster-생성">AWS ElastiCache for Redis Cluster 생성</h3>
<p>자세한 방법은 <a href="https://docs.aws.amazon.com/ko_kr/AmazonElastiCache/latest/red-ug/GettingStarted.CreateCluster.html">AWS ElastiCache 가이드 참고</a>.</p>

<h4 id="요약">요약</h4>
<ol>
  <li>VPC Subnet Group 생성</li>
  <li>Redis Cache Cluster 생성</li>
  <li>보안 그룹 설정에 Redis 관련 Port 추가</li>
</ol>

<h3 id="spring-boot--redis-연동-설정">Spring Boot + Redis 연동 설정</h3>
<h4 id="redis-관련-의존성-추가">Redis 관련 의존성 추가</h4>

<figure class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-data-redis'</span>
<span class="n">compile</span> <span class="nl">group:</span> <span class="s1">'redis.clients'</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">'jedis'</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">'3.3.0'</span></code></pre></figure>

<h4 id="applicationyml-수정">application.yml 수정</h4>

<figure class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="na">spring</span><span class="pi">:</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">AWS ElastiCache End-Point Host url</span><span class="pi">]</span>
    <span class="na">port</span><span class="pi">:</span> <span class="s">6379</span></code></pre></figure>

<h4 id="redis-config-추가">Redis Config 추가</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@EnableRedisRepositories</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.host}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">redisHost</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.port}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">redisPort</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">JedisConnectionFactory</span> <span class="nf">jedisConnectionFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">RedisStandaloneConfiguration</span> <span class="n">redisStandaloneConfiguration</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisStandaloneConfiguration</span><span class="o">(</span><span class="n">redisHost</span><span class="o">,</span> <span class="n">redisPort</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JedisConnectionFactory</span><span class="o">(</span><span class="n">redisStandaloneConfiguration</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"redisTemplate"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">(</span><span class="nc">RedisConnectionFactory</span> <span class="n">redisConnectionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>

        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"cacheManager"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">CacheManager</span> <span class="nf">cacheManager</span><span class="o">(</span><span class="nc">RedisConnectionFactory</span> <span class="n">redisConnectionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/**
         * Cache 기본 설정
         */</span>
        <span class="nc">RedisCacheConfiguration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="nc">RedisCacheConfiguration</span><span class="o">.</span><span class="na">defaultCacheConfig</span><span class="o">()</span>
                <span class="o">.</span><span class="na">disableCachingNullValues</span><span class="o">()</span>                                 <span class="c1">// Null Value 는 Cache 사용하지 않음</span>
                <span class="o">.</span><span class="na">entryTtl</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="nc">CacheKey</span><span class="o">.</span><span class="na">DEFAULT_EXPIRE_SEC</span><span class="o">))</span>  <span class="c1">// Cache 의 기본 유효시간 설정(60sec)</span>
                <span class="o">.</span><span class="na">computePrefixWith</span><span class="o">(</span><span class="nc">CacheKeyPrefix</span><span class="o">.</span><span class="na">simple</span><span class="o">())</span>                 <span class="c1">// Cache Key 의 Prefix 설정(name + "::")</span>
                <span class="c1">// Redis Cache 데이터 저장방식을 StringSerializer 로 설정</span>
                <span class="o">.</span><span class="na">serializeKeysWith</span><span class="o">(</span><span class="nc">RedisSerializationContext</span><span class="o">.</span><span class="na">SerializationPair</span><span class="o">.</span><span class="na">fromSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">()));</span>

        <span class="cm">/**
         * Cache 상세 설정
         * - Cache default expire 시간 설정
         */</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">RedisCacheConfiguration</span><span class="o">&gt;</span> <span class="n">cacheConfigurations</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">cacheConfigurations</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">CacheKey</span><span class="o">.</span><span class="na">USER</span><span class="o">,</span> <span class="nc">RedisCacheConfiguration</span><span class="o">.</span><span class="na">defaultCacheConfig</span><span class="o">().</span><span class="na">entryTtl</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="nc">CacheKey</span><span class="o">.</span><span class="na">USER_EXPIRE_SEC</span><span class="o">)));</span>
        <span class="n">cacheConfigurations</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">CacheKey</span><span class="o">.</span><span class="na">BOARD</span><span class="o">,</span> <span class="nc">RedisCacheConfiguration</span><span class="o">.</span><span class="na">defaultCacheConfig</span><span class="o">().</span><span class="na">entryTtl</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="nc">CacheKey</span><span class="o">.</span><span class="na">BOARD_EXPIRE_SEC</span><span class="o">)));</span>

        <span class="k">return</span> <span class="nc">RedisCacheManager</span><span class="o">.</span><span class="na">RedisCacheManagerBuilder</span>
                <span class="o">.</span><span class="na">fromConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">)</span>
                <span class="o">.</span><span class="na">cacheDefaults</span><span class="o">(</span><span class="n">configuration</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withInitialCacheConfigurations</span><span class="o">(</span><span class="n">cacheConfigurations</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h3 id="entity-redis-설정">Entity Redis 설정</h3>
<h4 id="caching-객체-serializable">Caching 객체 Serializable</h4>
<h5 id="caching-객체-serializable-하는-이유">Caching 객체 Serializable 하는 이유</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Redis</code>에 객체를 저장하면 내부적으로 직렬화하여 저장</li>
  <li><code class="language-plaintext highlighter-rouge">Entity</code>에 <code class="language-plaintext highlighter-rouge">Serializable</code>을 선언하지 않으면 오류 발생 가능
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Board</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
<span class="o">...</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <h4 id="lazy-loading-false">Lazy Loading False</h4>
    <h5 id="lazy-loading-false-처리-하는-이유">Lazy Loading false 처리 하는 이유</h5>
  </li>
  <li>Entity 객체내에서 연관관계 Mapping에 의해 Lazy(지연) Loading 되는 경우 오류 발생 가능
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Proxy</span><span class="o">(</span><span class="n">lazy</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
<span class="o">...</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="crud-methods-caching-처리">CRUD Methods Caching 처리</h3>
<p><strong>Caching 처리 관련 Annotation</strong>
| Annotation | 설명 |
| :—: | — |
| <code class="language-plaintext highlighter-rouge">@Cacheable</code> | <code class="language-plaintext highlighter-rouge">Cache</code>가 존재하면 요청된 <code class="language-plaintext highlighter-rouge">Method</code>를 실행하지 않고 <code class="language-plaintext highlighter-rouge">Cache</code>데이터를 반환 처리 |
| <code class="language-plaintext highlighter-rouge">@CachePut</code> | <code class="language-plaintext highlighter-rouge">Cache</code>에 데이터를 넣거나 수정시 사용. <code class="language-plaintext highlighter-rouge">Method</code>의 반환값이 <code class="language-plaintext highlighter-rouge">Cache</code>에 없으면 저장하고, 있는 경우엔 갱신 처리 |
| <code class="language-plaintext highlighter-rouge">@CacheEvict</code> | <code class="language-plaintext highlighter-rouge">Cache</code> 삭제 |
| <code class="language-plaintext highlighter-rouge">@Caching</code> | 여러개의 <code class="language-plaintext highlighter-rouge">Cache Annotation</code>을 실행되어야 할 때 사용 |</p>

<h5 id="annotation-옵션-설명">Annotation 옵션 설명</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value = CacheKey.BOARD</code> : 저장시 사용되는 Key Name</li>
  <li><code class="language-plaintext highlighter-rouge">key = "#id"</code> : <code class="language-plaintext highlighter-rouge">value</code> 옵션에서 선언된 Key Name 과 결합 <strong><em>(ex. ‘board::1’)</em></strong></li>
  <li><code class="language-plaintext highlighter-rouge">unless = "#result == null"</code> : 결과가 <code class="language-plaintext highlighter-rouge">null</code> 이 아닌 경우만 Caching 처리</li>
  <li><code class="language-plaintext highlighter-rouge">condition = "#id &gt; 10"</code> : 간단한 조건문에 따라 Caching 처리</li>
</ul>

<h3 id="cache-처리의-또다른-방법-cacheservice-추가">Cache 처리의 또다른 방법. CacheService 추가</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Caching</code> 처리해주는 Service</li>
  <li>왜 <code class="language-plaintext highlighter-rouge">CacheService</code>가 필요한가?
    <ul>
      <li>요청받은 <code class="language-plaintext highlighter-rouge">Method</code>의 인자값으로 <code class="language-plaintext highlighter-rouge">Cache Key</code>를 조합할 수 없을 때가 있기 때문</li>
      <li><code class="language-plaintext highlighter-rouge">Proxy</code>의 특성상 같은 객체내에서는 <code class="language-plaintext highlighter-rouge">Caching</code>처리된 <code class="language-plaintext highlighter-rouge">Method</code> 호출시 동작하지 않기 때문</li>
    </ul>
  </li>
</ul>

<h3 id="custom-key-generator">Custom Key Generator</h3>
<h4 id="customkeygeneratorjava">CustomKeyGenerator.java</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomKeyGenerator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="nf">create</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o1</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"FRONT:"</span> <span class="o">+</span> <span class="n">o1</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="nf">create</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"FRONT:"</span> <span class="o">+</span> <span class="n">o1</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">o2</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="customkeygenerator-이용한-caching">CustomKeyGenerator 이용한 Caching</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="nc">CacheKey</span><span class="o">.</span><span class="na">BOARD</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"T(com.demo.restapi.config.redis.CustomKeyGenerator).create(#id)"</span><span class="o">,</span> <span class="n">unless</span> <span class="o">=</span> <span class="s">"#result == null"</span><span class="o">)</span>
</code></pre></div></div>

<hr />

<blockquote>
  <p><strong>Reference</strong>
<a href="https://keyholesoftware.com/2018/08/28/using-amazon-elasticache-for-redis-to-optimize-your-spring-boot-application/">keyholesoftware.com [Using Amazon ElastiCache For Redis]</a></p>
</blockquote>
:ET