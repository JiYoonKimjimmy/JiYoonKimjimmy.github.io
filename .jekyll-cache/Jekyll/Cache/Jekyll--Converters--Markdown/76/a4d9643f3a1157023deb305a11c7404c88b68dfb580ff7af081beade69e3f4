I"xm<blockquote>
  <p><a href="https://velog.io/@swchoi0329/NGINX-%EB%AC%B4%EC%A4%91%EB%8B%A8-%EB%B0%B0%ED%8F%AC">참고. swchoi.log 블로그 [Nginx 무중단 배포]</a></p>
</blockquote>

<h2 id="nginx">Nginx</h2>
<p><code class="language-plaintext highlighter-rouge">Nginx(엔진엑스)</code> 는 <strong>동시 접속 처리에 특화된</strong> 웹 서버 프로그램</p>
<ul>
  <li>Apache 보다는 단순하면서, 전달자 역할만 수행하기 때문에 동시 접속 처리에 용이</li>
  <li>비동기 Event-Driven 기반 구조</li>
  <li>Nginx 의 역할로서,
    <ul>
      <li>정적 파일 처리 HTTP 서버 역할</li>
      <li>Reverse Proxy 서버 역할</li>
    </ul>
  </li>
</ul>

<p><strong>Reverse Proxy 서버?</strong>
Client 가 Server 로 요청한 경우, Proxy 서버 <strong><em>(NGINX)</em></strong> 가 Reverse 서버 <strong><em>(Application)</em></strong> 로부터 데이터를 가져오는 역할을 한다.</p>

<p><strong>Event-Driven 구조?</strong>
여러 Connection 을 Event Handler 를 통해 비동기 방식으로 처리
<img src="https://mblogthumb-phinf.pstatic.net/MjAxNzAzMjZfMTM3/MDAxNDkwNDk1NjMxNzgy.OHZ33nerX_6Hc92Mg_xjr51acwwi1P_mq3SIl7Cuhisg.niRsQQVM5CwGpXKcdOxl3bkNsmfBkqGV1ajcBpV6CvQg.GIF.jhc9639/mighttpd_e02.gif.gif?type=w800" alt="Event-Driven" /></p>

<h2 id="nginx-무중단-배포">Nginx 무중단 배포</h2>
<h3 id="구성">구성</h3>
<ul>
  <li>Nginx 1대
    <ul>
      <li>HTTP : 80 port</li>
      <li>HTTPS : 443 port</li>
    </ul>
  </li>
  <li>Spring Boot Application 2대
    <ul>
      <li>Spring Boot 1 : 8081 port</li>
      <li>Spring Boot 2 : 8082 port</li>
    </ul>
  </li>
</ul>

<h3 id="1-nginx-설치-및-spring-boot-연동">1. Nginx 설치 및 Spring Boot 연동</h3>
<h4 id="ec2-에-nginx-설치">EC2 에 Nginx 설치</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nb">install </span>nginx
<span class="c"># nginx 실행</span>
<span class="nv">$ </span><span class="nb">sudo </span>service nginx start</code></pre></figure>

<h4 id="보안-그룹-추가">보안 그룹 추가</h4>
<ul>
  <li>인바운드 규칙 &gt; <code class="language-plaintext highlighter-rouge">HTTP port 80</code> 지정 안되어 있는 경우 지정</li>
  <li>EC2 domain 주소 <strong>(port 제외)</strong> 접속 확인</li>
</ul>

<h4 id="spring-boot--nginx">Spring Boot + Nginx</h4>
<p><strong><code class="language-plaintext highlighter-rouge">/etc/nginx/nginx.conf</code> 수정</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">...
server <span class="o">{</span>
  ...
  location <span class="se">\ </span><span class="o">{</span>
    <span class="c"># Nginx 로 요청이 들어오면 해당 주소로 전달</span>
    proxy_pass http://localhost:8080<span class="p">;</span>
    <span class="c"># 실제 요청 데이터를 header 의 각 항목에 할당</span>
    proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
    proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
    proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
  <span class="o">}</span>
  ...
<span class="o">}</span>
...</code></pre></figure>

<p><strong>Nginx 재시작</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>service nginx restart
</code></pre></div></div>

<p><strong>Spring Boot 연동 확인</strong></p>
<ul>
  <li>프로젝트 Domain <strong>(port 제외)</strong> 접속 확인</li>
</ul>

<h3 id="2-profile-api-추가">2. Profile API 추가</h3>
<ul>
  <li>실행중인 profile 조회하기 위한 API</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/profile"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Environment</span> <span class="n">environment</span><span class="o">;</span>

    <span class="nd">@GetMapping</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">profile</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// .getActiveProfiles() : 현재 실행 중인 Active Profile 목록 조회</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">profiles</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">environment</span><span class="o">.</span><span class="na">getActiveProfiles</span><span class="o">());</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">realProfiles</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"real"</span><span class="o">,</span> <span class="s">"real1"</span><span class="o">,</span> <span class="s">"real2"</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">defaultProfile</span> <span class="o">=</span> <span class="n">profiles</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">?</span> <span class="s">"default"</span> <span class="o">:</span> <span class="n">profiles</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">profiles</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">realProfiles:</span><span class="o">:</span><span class="n">contains</span><span class="o">)</span>
                <span class="o">.</span><span class="na">findAny</span><span class="o">()</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">defaultProfile</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h4 id="securityconfigurationjava-수정">SecurityConfiguration.java 수정</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/profile</code> API security permission 승인 처리</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">...</span>
<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/*/sign/**"</span><span class="o">,</span> <span class="s">"/*/sign/*/**"</span><span class="o">,</span> <span class="s">"/social/**"</span><span class="o">,</span> <span class="s">"/profile"</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
<span class="o">...</span></code></pre></figure>

<h3 id="3-profile-파일-추가-생성">3. Profile 파일 추가 생성</h3>
<ul>
  <li>real1, real2 각각 profile yml 생성</li>
</ul>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># application-real1.yml, application-real2.yml</span>
<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8081</span>        <span class="c1"># real2 인 경우, 8082</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">profiles</span><span class="pi">:</span> <span class="s">real1</span>   <span class="c1"># real2 인 경우, real2</span>
  <span class="na">url</span><span class="pi">:</span>
    <span class="na">base</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Application Domain</span><span class="pi">]</span>

<span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">root</span><span class="pi">:</span> <span class="s">warn</span>
    <span class="s">com.demo.restapi</span><span class="pi">:</span> <span class="s">info</span>
  <span class="na">file</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">/home/ec2-user/logs/rest-api</span>
    <span class="na">max-history</span><span class="pi">:</span> <span class="s">7</span></code></pre></figure>

<h3 id="4-nginx-설정-수정">4. Nginx 설정 수정</h3>
<h4 id="etcnginxconfdservice-urlinc-생성"><code class="language-plaintext highlighter-rouge">/etc/nginx/conf.d/service-url.inc</code> 생성</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>vi /etc/nginx/conf.d/service-url.inc

<span class="c"># service=url.inc</span>
<span class="nb">set</span> <span class="nv">$service_url</span> http://127.0.0.1:8080<span class="p">;</span></code></pre></figure>

<h4 id="etcnginxnginxconf-수정"><code class="language-plaintext highlighter-rouge">/etc/nginx/nginx.conf</code> 수정</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">...
server <span class="o">{</span>
  ...
  location <span class="se">\ </span><span class="o">{</span>
    <span class="c"># 추가</span>
    include /etc/nginx/conf.d/service-url.inc

    <span class="c"># http://localhost:8080 -&gt; $service_url 로 변경</span>
    proxy_pass <span class="nv">$service_url</span><span class="p">;</span>
    proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
    proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
    proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
  <span class="o">}</span>
  ...
<span class="o">}</span>
...</code></pre></figure>

<p><strong>Nginx 재시작</strong></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>service nginx restart</code></pre></figure>

<h3 id="5-deploy-script-추가">5. Deploy Script 추가</h3>
<h4 id="추가할-scrpit-목록">추가할 Scrpit 목록</h4>
<p>| script | 설정 |
| — | :—: |
| <code class="language-plaintext highlighter-rouge">profile.sh</code> | 현재 profile 버전, port 확인 |
| <code class="language-plaintext highlighter-rouge">stop.sh</code> | 실행 중이던 Spring Boot 종료 |
| <code class="language-plaintext highlighter-rouge">start.sh</code> | 배포할 Spring Boot 종료 후 <code class="language-plaintext highlighter-rouge">profile.sh</code> 실행 |
| <code class="language-plaintext highlighter-rouge">health.sh</code> | <code class="language-plaintext highlighter-rouge">start.sh</code> 로 실행된 프로젝트 정상 동작 확인 |
| <code class="language-plaintext highlighter-rouge">switch.sh</code> | Nginx 의 Spring Boot 를 최신 profile 버전으로 변경 |</p>

<h4 id="appspecyml-수정"><code class="language-plaintext highlighter-rouge">appspec.yml</code> 수정</h4>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">hooks</span><span class="pi">:</span>
  <span class="c1"># Nginx 와 연동된 Spring Boot 프로젝트 종료</span>
  <span class="na">AfterInstall</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">location</span><span class="pi">:</span> <span class="s">stop.sh</span>
      <span class="na">timeout</span><span class="pi">:</span> <span class="m">60</span>
      <span class="na">runas</span><span class="pi">:</span> <span class="s">ec2-user</span>
  <span class="c1"># Nginx 와 연동안된 profile 버전으로 Spring Boot 실행</span>
  <span class="na">ApplicationStart</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">location</span><span class="pi">:</span> <span class="s">start.sh</span>
      <span class="na">timeout</span><span class="pi">:</span> <span class="m">60</span>
      <span class="na">runas</span><span class="pi">:</span> <span class="s">ec2-user</span>
  <span class="c1"># 새로 실행된 Spring Boot 정상 동작 확인</span>
  <span class="na">ValidateService</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">location</span><span class="pi">:</span> <span class="s">health.sh</span>
      <span class="na">timeout</span><span class="pi">:</span> <span class="m">60</span>
      <span class="na">runas</span><span class="pi">:</span> <span class="s">ec2-user</span></code></pre></figure>

<h4 id="profilesh"><code class="language-plaintext highlighter-rouge">profile.sh</code></h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>

<span class="c"># 쉬고 있는 profile 찾기</span>
<span class="k">function </span>find_idle_profile<span class="o">()</span> <span class="o">{</span>
  <span class="c"># 현재 Nginx 와 연동된 프로젝트가 정상적인지 확인</span>
  <span class="c"># RESPONSE_CODE 는 HTTP status code 로 반환</span>
  <span class="nv">RESPONSE_CODE</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> <span class="nt">-o</span> /dev/null <span class="nt">-w</span> <span class="s2">"%{http_code}"</span> http://localhost/profile<span class="si">)</span>

  <span class="c"># 프로젝트 상태가 400 보다 큰 경우, 에러</span>
  <span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">RESPONSE_CODE</span><span class="k">}</span> <span class="nt">-ge</span> 400 <span class="o">]</span>
  <span class="k">then
    </span><span class="nv">CURRENT_PROFILE</span><span class="o">=</span>real2
  <span class="k">else
    </span><span class="nv">CURRENT_PROFILE</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> http://localhost/profile<span class="si">)</span>
  <span class="k">fi

  if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">CURRENT_PROFILE</span><span class="k">}</span> <span class="o">==</span> real1 <span class="o">]</span>
  <span class="k">then
    </span><span class="nv">IDLE_PROFILE</span><span class="o">=</span>real2
  <span class="k">else
    </span><span class="nv">IDLE_PROFILE</span><span class="o">=</span>real1
  <span class="k">fi

  </span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">IDLE_PROFILE</span><span class="k">}</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 쉬고 있는 profile 의 port 찾기</span>
<span class="k">function </span>find_idle_port<span class="o">()</span> <span class="o">{</span>
  <span class="nv">IDLE_PROFILE</span><span class="o">=</span><span class="si">$(</span>find_idle_profile<span class="si">)</span>

  <span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">IDLE_PROFILE</span><span class="k">}</span> <span class="o">==</span> real1 <span class="o">]</span>
  <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"8081"</span>
  <span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"8082"</span>
  <span class="k">fi</span>
<span class="o">}</span></code></pre></figure>

<h4 id="stopsh"><code class="language-plaintext highlighter-rouge">stop.sh</code></h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>

<span class="nv">ABSPATH</span><span class="o">=</span><span class="si">$(</span><span class="nb">readlink</span> <span class="nt">-f</span> <span class="nv">$0</span><span class="si">)</span>
<span class="nv">ABSDIR</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="nv">$ABSPATH</span><span class="si">)</span>
<span class="nb">source</span> <span class="k">${</span><span class="nv">ABSDIR</span><span class="k">}</span>/profile.sh

<span class="nv">IDLE_PORT</span><span class="o">=</span><span class="si">$(</span>find_idle_port<span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"&gt; </span><span class="nv">$IDLE_PORT</span><span class="s2"> 에서 구동 중인 애플리케이션 pid 확인"</span>
<span class="nv">IDLE_PID</span><span class="o">=</span><span class="si">$(</span>lsof <span class="nt">-ti</span> tcp:<span class="k">${</span><span class="nv">IDLE_PORT</span><span class="k">}</span><span class="si">)</span>

<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="k">${</span><span class="nv">IDLE_PID</span><span class="k">}</span> <span class="o">]</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"&gt; 현재 구동 중인 애플리케이션이 없으므로 종료하지 않습니다."</span>
<span class="k">else
  </span><span class="nb">echo</span> <span class="s2">"&gt; kill -15 </span><span class="nv">$IDLE_PID</span><span class="s2">"</span>
  <span class="nb">kill</span> <span class="nt">-15</span> <span class="k">${</span><span class="nv">IDLE_PID</span><span class="k">}</span>
  <span class="nb">sleep </span>5
<span class="k">fi</span></code></pre></figure>

<h4 id="startsh"><code class="language-plaintext highlighter-rouge">start.sh</code></h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>

<span class="nv">ABSPATH</span><span class="o">=</span><span class="si">$(</span><span class="nb">readlink</span> <span class="nt">-f</span> <span class="nv">$0</span><span class="si">)</span>
<span class="nv">ABSDIR</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="nv">$ABSPATH</span><span class="si">)</span>
<span class="nb">source</span> <span class="k">${</span><span class="nv">ABSDIR</span><span class="k">}</span>/profile.sh

<span class="nv">REPOSITORY</span><span class="o">=</span>/home/ec2-user/apps
<span class="nv">DEPLOY_DIRECTORY</span><span class="o">=</span>/home/ec2-user/deploy
<span class="nv">PROJECT_NAME</span><span class="o">=</span>rest-api

<span class="nb">echo</span> <span class="s2">"&gt; old 파일 이동"</span>
<span class="nb">mv</span> <span class="nv">$REPOSITORY</span>/<span class="nv">$PROJECT_NAME</span>/<span class="k">*</span>.jar <span class="nv">$REPOSITORY</span>/<span class="nv">$PROJECT_NAME</span>/old/

<span class="nb">echo</span> <span class="s2">"&gt; Build 파일 복사"</span>
<span class="nb">cp</span> <span class="nv">$DEPLOY_DIRECTORY</span>/<span class="nv">$PROJECT_NAME</span>/<span class="k">*</span>.jar <span class="nv">$REPOSITORY</span>/<span class="nv">$PROJECT_NAME</span>/

<span class="nb">echo</span> <span class="s2">"&gt; 새 애플리케이션 배포"</span>
<span class="nv">JAR_NAME</span><span class="o">=</span><span class="si">$(</span><span class="nb">ls</span> <span class="nt">-tr</span> <span class="nv">$REPOSITORY</span>/<span class="nv">$PROJECT_NAME</span>/<span class="k">*</span>.jar | <span class="nb">tail</span> <span class="nt">-n</span> 1<span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"&gt; JAR Name: </span><span class="nv">$JAR_NAME</span><span class="s2">"</span>

<span class="nb">echo</span> <span class="s2">"&gt; </span><span class="nv">$JAR_NAME</span><span class="s2"> 에 실행권한 추가"</span>
<span class="nb">chmod</span> +x <span class="nv">$JAR_NAME</span>

<span class="nb">echo</span> <span class="s2">"&gt; </span><span class="nv">$JAR_NAME</span><span class="s2"> 실행"</span>
<span class="nv">IDLE_PROFILE</span><span class="o">=</span><span class="si">$(</span>find_idle_profile<span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"&gt; </span><span class="nv">$JAR_NAME</span><span class="s2"> 를 profile=</span><span class="nv">$IDLE_PROFILE</span><span class="s2"> 로 실행합니다."</span>
<span class="nb">nohup </span>java <span class="nt">-jar</span> <span class="se">\</span>
    <span class="nt">-Dspring</span>.config.location<span class="o">=</span>classpath:/application.yml,classpath:/application-<span class="nv">$IDLE_PROFILE</span>.yml,/home/ec2-user/apps/config/application-db.yml <span class="se">\</span>
    <span class="nt">-Dspring</span>.profiles.active<span class="o">=</span><span class="nv">$IDLE_PROFILE</span> <span class="se">\</span>
    <span class="nt">-Dfile</span>.encoding<span class="o">=</span>UTF-8 <span class="se">\</span>
    <span class="nv">$JAR_NAME</span> <span class="o">&gt;</span> <span class="nv">$REPOSITORY</span>/<span class="nv">$PROJECT_NAME</span>/nohup.out 2&gt;&amp;1 &amp;</code></pre></figure>

<h4 id="healthsh"><code class="language-plaintext highlighter-rouge">health.sh</code></h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>

<span class="nv">ABSPATH</span><span class="o">=</span><span class="si">$(</span><span class="nb">readlink</span> <span class="nt">-f</span> <span class="nv">$0</span><span class="si">)</span>
<span class="nv">ABSDIR</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="nv">$ABSPATH</span><span class="si">)</span>
<span class="nb">source</span> <span class="k">${</span><span class="nv">ABSDIR</span><span class="k">}</span>/profile.sh
<span class="nb">source</span> <span class="k">${</span><span class="nv">ABSDIR</span><span class="k">}</span>/switch.sh

<span class="nv">IDLE_PORT</span><span class="o">=</span><span class="si">$(</span>find_idle_port<span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"&gt; Health Check Start!"</span>
<span class="nb">echo</span> <span class="s2">"&gt; IDLE_PORT: </span><span class="nv">$IDLE_PORT</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"&gt; curl -s http://localhost:</span><span class="nv">$IDLE_PORT</span><span class="s2">/profile"</span>
<span class="nb">sleep </span>10

<span class="k">for </span>RETRY_COUNT <span class="k">in</span> <span class="o">{</span>1..10<span class="o">}</span>
<span class="k">do
  </span><span class="nv">RESPONSE</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> http://localhost:<span class="k">${</span><span class="nv">IDLE_PORT</span><span class="k">}</span>/profile<span class="si">)</span>
  <span class="nv">UP_COUNT</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">RESPONSE</span><span class="k">}</span> | <span class="nb">grep</span> <span class="s1">'real'</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>

  <span class="c"># $UP_COUNT &gt;= 1 ("real" 문자열이 있는지 검증)</span>
  <span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">UP_COUNT</span><span class="k">}</span> <span class="nt">-ge</span> 1 <span class="o">]</span>
  <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"&gt; Health check 성공"</span>
    switch_proxy
    <span class="nb">break
  </span><span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"&gt; Health check의 응답을 알 수 없거나 혹은 실행 상태가 아닙니다."</span>
    <span class="nb">echo</span> <span class="s2">"&gt; Health check: </span><span class="k">${</span><span class="nv">RESPONSE</span><span class="k">}</span><span class="s2">"</span>
  <span class="k">fi

  if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">RETRY_COUNT</span><span class="k">}</span> <span class="nt">-eq</span> 10 <span class="o">]</span>
  <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"&gt; Health check 실패. "</span>
    <span class="nb">echo</span> <span class="s2">"&gt; 엔진엑스에 연결하지 않고 배포를 종료합니다."</span>
    <span class="nb">exit </span>1
  <span class="k">fi

  </span><span class="nb">echo</span> <span class="s2">"&gt; Health check 연결 실패. 재시도..."</span>
  <span class="nb">sleep </span>10
<span class="k">done</span></code></pre></figure>

<h4 id="switchsh"><code class="language-plaintext highlighter-rouge">switch.sh</code></h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>

<span class="nv">ABSPATH</span><span class="o">=</span><span class="si">$(</span><span class="nb">readlink</span> <span class="nt">-f</span> <span class="nv">$0</span><span class="si">)</span>
<span class="nv">ABSDIR</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="nv">$ABSPATH</span><span class="si">)</span>
<span class="nb">source</span> <span class="k">${</span><span class="nv">ABSDIR</span><span class="k">}</span>/profile.sh

<span class="k">function </span>switch_proxy<span class="o">()</span> <span class="o">{</span>
  <span class="nv">IDLE_PORT</span><span class="o">=</span><span class="si">$(</span>find_idle_port<span class="si">)</span>

  <span class="nb">echo</span> <span class="s2">"&gt; 전환할 Port: </span><span class="nv">$IDLE_PORT</span><span class="s2">"</span>
  <span class="nb">echo</span> <span class="s2">"&gt; Port 전환"</span>

  <span class="c"># Nginx 가 변경할 Proxy 주소를 생성 후, service-url.inc 에 over-write</span>
  <span class="nb">echo</span> <span class="s2">"set </span><span class="se">\$</span><span class="s2">service_url http://127.0.0.1:</span><span class="k">${</span><span class="nv">IDLE_PORT</span><span class="k">}</span><span class="s2">;"</span> | <span class="nb">sudo tee</span> /etc/nginx/conf.d/service-url.inc

  <span class="nb">echo</span> <span class="s2">"&gt; 엔진엑스 Reload"</span>

  <span class="c"># Nginx 설정 reload(끊김 없이 다시 불러옴)</span>
  <span class="nb">sudo </span>service nginx reload
<span class="o">}</span></code></pre></figure>

<h3 id="무중단-배포-확인">무중단 배포 확인</h3>
<h4 id="buildgradle-수정"><code class="language-plaintext highlighter-rouge">build.gradle</code> 수정</h4>

<figure class="highlight"><pre><code class="language-groovy" data-lang="groovy"><span class="n">version</span> <span class="o">=</span> <span class="s1">'0.0.1-SNAPSHOT-'</span> <span class="o">+</span> <span class="k">new</span> <span class="n">Date</span><span class="o">().</span><span class="na">format</span><span class="o">(</span><span class="s2">"yyyyMMddHHmmss"</span><span class="o">)</span></code></pre></figure>

<h4 id="log-확인">Log 확인</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># CodeDeploy Log</span>
<span class="nv">$ </span>vi /opt/codedeploy-agent/deploayment-root/deployment-logs
<span class="c"># Spring Boot log</span>
<span class="nv">$ </span>vi nohup.out
<span class="c"># Java application 실행 여부 확인</span>
<span class="nv">$ </span>ps <span class="nt">-ef</span> | <span class="nb">grep </span>java</code></pre></figure>

<hr />

<p><a href="https://github.com/JiYoonKimjimmy/demo-rest-api">관련 Github Repository</a></p>
:ET